# Introduction to TOML config file format: https://npf.io/2014/08/intro-to-toml/

# The work of replicating a Couchbase bucket may be distributed between
# several connector worker processes, known collectively as a "group".
#
# The connector name uniquely identifies a group of connector workers.
# All workers in the group must use the same name. The group name
# is required even if there is only one worker.
#
# TIP: Changing the name invalidates the replication status checkpoint.
# To preserve the checkpoint, run the `cbes-checkpoint-backup` command
# before renaming, and `cbes-checkpoint-restore` afterwards.
[group]
  name = 'example-group'

# The simplest way to deploy the connector is "static" mode. In this mode,
# each worker process is independent of the others, and must be manually
# configured to know which partitions it is reponsible for.
[group.static]
  # Each member in a static group must have a unique member number.
  memberNumber = 1 # A value from 1 to 'totalMembers', inclusive.

  # The total number of workers in the static group.
  #
  # TIP: To safely add or remove workers from a static group, first stop all
  # running workers, then reconfigure them with the new 'totalMembers' value,
  # and finally start all the workers again.
  totalMembers = 1

# Performance metrics may be written to a log file and/or exposed via HTTP.
[metrics]
  httpPort = 31415 # Positive = fixed, 0 = ephemeral, -1 = disable HTTP server
  logInterval = '1m' # Set to '0m' to disable metrics logging

# Required if secure connections are enabled (SSL/TLS).
[truststore]
  # Use the keytool command to create this file, and import the root
  # certificate from the Security section of the Couchbase admin console.
  path = 'path/to/truststore'
  pathToPassword = 'secrets/truststore-password.toml'

[couchbase]
  hosts = ['localhost']
  bucket = 'travel-sample'

  # At a minimum, the Couchbase user must have the "Data Reader", "Data Writer",
  # and "Data DCP Reader" roles for the bucket.
  username = 'Administrator'

  # Path to a separate TOML file with a single 'password' key.
  # The base for a relative path is the connector installation directory.
  pathToPassword = 'secrets/couchbase-password.toml'

  # Optionally use SSL/TLS to encrypt the connection between Couchbase and
  # the connector. Requires Couchbase Enterprise Edition, and requires the
  # [truststore] section to be configured.
  secureConnection = false

# Options for the Database Change Protocol used to receive events from Couchbase.
[couchbase.dcp]
  compression = true
  flowControlBuffer = '128mb'
  persistencePollingInterval = '100ms'

[elasticsearch]
  hosts = ['localhost']
  username = 'elastic'

  # Path to a separate TOML file with a single 'password' key.
  # The base for a relative path is the connector installation directory.
  pathToPassword = 'secrets/elasticsearch-password.toml'

  secureConnection = false

[elasticsearch.bulkRequestLimits]
  bytes = '10mb'
  actions = 1000
  timeout = '1m'
  concurrentRequests = 2

[elasticsearch.docStructure]
  # The Elasticsearch document may optionally contain Couchbase metadata
  # (cas, revision, expiry, etc). If present, this will be a top-level field
  # of the Elasticsearch document. If you have configured the connector
  # to put document content at the top level, choose a field name that will
  # not conflict with any document fields. To omit the metadata field,
  # use an empty string.
  metadataFieldName = 'meta'

  # false means the ES document root will have a 'doc' field whose value is
  # the Couchbase document.
  # true means the ES document will be identical to the Couchbase document,
  # with the possible addition of the metadata field.
  documentContentAtTopLevel = false

  # false means ignore Couchbase counter documents.
  # true means replicate them as Object nodes like {"value":<counter>}
  wrapCounters = false

# The values in this section may be overridden by specific type definitions.
[elasticsearch.typeDefaults]
  index = ''            # Write matching documents to this index (empty string means "no default").
  pipeline = ''         # Send matching documents though this pipeline (empty string means "no pipeline").
  typeName = '_doc'     # Assign this type to matching documents. For ES 5.x remove leading underscore!
  ignore = false        # if true, ignore matching documents entirely (implies 'ignoreDeletes').
  ignoreDeletes = false # If true, never delete matching documents from Elasticsearch.

# Sample document type definitions for the travel-sample bucket.
# Replace these to match your own data model.
#
# At a minimum, each type must specify a 'regex' (Java regular expression) or 'prefix' property.
# The type config matches any Couchbase document whose IDs matches the regex or prefix.
#
# The order of type definitions is significant. If a document ID matches
# more than one type, the assigned type will be the one that occurs first
# in this configuration. If none match, the document will not be indexed.
[[elasticsearch.type]]
  prefix = '_sync:' # Couchbase Sync Gateway metadata
  ignore = true

[[elasticsearch.type]]
  prefix = 'airline_'
  index = 'airlines'
  pipeline = ''

[[elasticsearch.type]]
  regex = '.*port_.*' # Regex just for example. Matches prefixes "airport_", "seaport_", etc.
  index = 'airports'

[[elasticsearch.type]]
  prefix = '' # Empty prefix matches any document ID.
  index = 'etc'

# When Elasticsearch rejects a document (usually due to a type mapping error)
# a rejection log entry document is written to Elasticsearch. The log entry's
# document ID is the ID of the rejected Couchbase document. The log entry's
# content has the following fields:
#   "index"  - (string) name of the index the connector tried to write to
#   "type"   - (string) document type name used for the write attempt
#   "action" - (string) failed action type ("INDEX" or "DELETE")
#   "error"  - (string) error message received from Elasticsearch
[elasticsearch.rejectionLog]
  index = 'cbes-rejects'
  typeName = '_doc' # For ES 5.x remove leading underscore!
